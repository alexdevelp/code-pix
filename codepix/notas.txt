### Imersão Full-Cycle 15 - CODE PIX ###

Estudo de caso - CodePix
1 - É uma solução para simularmos transferencias de valores entre bancos ficticios atraves de chaves (email, cpf)
2 - Simularemos diversos bancos e contas bancarias que possuem uma chave Pix atribuida 
3 - Cada conta bancaria podera cadastrar suas chave Pix
4 - Uma conta bancaria podera realizar uma transferencia para outra conta em outro banco utilizano a chave Pix da conta de destino
5 - Uma transação não pode ser perdida mesmo que: o CodePix esteja fora do ar
6 - Uma transação não pode ser perdida mesmo que: o Banco de destino esteja fora do ar

Sobre os bancos
1 - o banco sera um microsserviço com funções limitadas a cadastro de contas e chaves Pix, bem como transferencia de valores
2 - Utilizaremos a mesma aplicação para simularmos diversos bancos, mudando apenas as cores, nome e código
3 - Nest.js no backend
4 - Next.js no frontend
5 - Container docker para diferenciação dos bancos: Banco BBX #1 - Banco CTD #2

Sobre o CodePix
1 - o microsserviço CodePix sera responsavel por intermediar as transferencias bancarias
2 - Receberá a transação de transferencia
3 - Encaminhará a transação para o banco de destino - com status "pending"
4 - Receberá a confirmação do banco de destino - com status "confirmed"
5 - Enviará a confirmação para o banco de origem informando que o banco de destino processou a transação
6 - Receberá a confirmação do banco de origem de que ele processou a confirmação - com status "completed"
7 - Marcará a transação como completa - status completed


Cadastro e consulta de chave Pix
1 - O banco BBX irá efetuar uma consulta no CodePix, afim de verificar a existencia da chave pix que está sendo criada
2 - O banco BBX irá enviar a solicitação de criação da chave pix, caso ela não tenha sido criada
3 - O banco BBX irá receber a confirmação da criação da chave pix, vinda do CodePix

Principais desafios
1 - Comunicação rápida e eficiente
2 - Criação e consulta instantanea das chaves (Sincrona)
3 - Garantia de que nenhuma transação seja perdida, mesmo que qualquer dos 3 sistemas estjam fora do ar (Assincrona)

Ferramentas
1 - Comunicação via gRPC - Framework - Protocol Buffers
2 - Para Comunicação assincrona - Apache Kafka - processamento de dados de um lado para outro - Stream de Dados

Arquitetura CodePix
1 - Será capaz de atuar como um servidor gRPC
2 - Consumir e publicar mensagens no Apache Kafka
3 - Ambas operações devem ser realizadas de forma simultanea ao executar o serviço
4 - Trabalhar com um design focado em solucionar o problema do dominio (DDD)
5 - Deixar a complexidade técnica para "camada de aplicação", responsavel pelo servidor gRPC e Kafka
6 - Aplicação flexivel para implementação de outros formatos de comunicação.Como API Rest, CLI, etc.
sem alterar nenhum outro componente da aplicação ou modelo de dominio
7 - Arquitetura Hexagonal / Port and Adapters



### Anotações ###

- Subindo container do projeto:
> docker-compose up -d

- Entrando no container do APP:
> docker exec -it imersao15-app-1 bash

- Iniciando módulos Go (dentro do container) (onde fica as libs que usamos no projeto):
> go mod init github.com/alexdevelp/code-pix

- Para rodar os testes 
> go test ./...

- Comando para instalar pacotes go:
> go mod tidy

- Listar versões de pacotes, Exemplo confluente-kafka-go 
> go list -m -versions github.com/confluentinc/confluent-kafka-go


- Comando gRPC para compilar nossos contratos (stubs):
1 - protoc --go_out=application/grpc/pb --go_opt=paths=source_relative --go-grpc_out=application/grpc/pb --go-grpc_opt=paths=source_relative --proto_path=application/grpc/protofiles application/grpc/protofiles/*.proto
2 - protoc --proto_path=proto/ proto/*.proto --plugin=$(go env GOPATH)/bin/protoc-gen-go-grpc --go-grpc_out=. --go_out=.
3 - protoc --proto_path=application/grpc/protofiles application/grpc/protofiles/*.proto --plugin=$(go env GOPATH)/bin/protoc-gen-go-grpc --go-grpc_out=. --go_out=.


- Comando para rodar o servidor (aula 2) (dentro do container) (precisa ter o arquivo main.go na pasta cmd):
> go run cmd/main.go
- Rodando o app com a CLI Cobra:
> go run main.go grpc
> go run main.go grpc --port 50052

- Clint Interativo para gRPC (dentro do container) (antes, verificar se o servidor gRPC está rodando na porta 50051):
> evans -r repl

- Precisa iniciar o cobra
> cobra-cli init
> cobra-cli add grpc

- No servidro gRPC, usando o evans, precisamos ir definindo o serviço a ser trabalhado:
> package 
> service
> show


### Apache Kafka - Transações Assincronas - Poque o Kakfka? ###
- Event-driven
> Carros
> E-commerce
> Alarmes/notificações
> Monitoramento
> Microsserviços (transações assincronas)

- Tempo Real (throughput de 2ms)
- Histórico de dados

# Principais Caracteristicas
> Plataforma
> Trabalha de forma distribuída
> Banco de dados
> Extremamente rapido e com baixa latencia
> Utiliza o disco ao inves de memoria para processar os dados

#Ecosistema
> Kakfak Connect
    - connectors (banco a com banco b, pro exemplo)
> Confluent Schema Registry
> Rest Proxy 
> ksqlDB (SQL do kafka) (query no kakfa em tempo real)
> Stream

#OBS: NÃO é apens um sistema tradicional de filas como RabbitMQ ou Amazon SQS
#OBS: Iniciar Kakfa com o cobra (cobra add kafka)

# Conceito basico
-Topic
> stream que atua como um banco de dados
> Todos os dados ficam armezenados, ou seja cada topico tem seu "local" para armazenar seus dados.
> Tópico possui diversas partições
    * cada partição é definida por um numero. Exemplo 0,1,2..
    * Você é obrigado a definir a quantidade de partições quando for criar um topic

#Kafka Cluster
> Conjuto de Brokers (maquinas)
> Cada broker é um server
> Cada Broker é responsável por armazenar os dados de uma partição
> Cada partição de um Topic está distribuído em diferentes brokers


# Kafka comandos
- Dentro do container kafka, listar topicos
> kafka-topics --list --bootstrap-server=localhost:9092

- Rodando bootstrap-server:
> kafka-console-consumer --topic=Teste --bootstrap-server=localhost:9092

- Temos o control center - visual
http://localhost:9021







# gRPC
https://grpc.io/